{"version":3,"sources":["docs.scss","vendor/include-media/_include-media.scss","docs.css"],"names":[],"mappings":"AAKA;EACI,iBAAiB;EACjB,iBAAiB;CACpB;;AAGD;EACI,gBAAgB;EAChB,iBAAiB;EACjB,iBAAiB;CA4CpB;;AA/CD;EAMQ,0BAA0B;EAC1B,uBAAuB;EACvB,YAAY;EACZ,gBAAgB;EAChB,cAAc;EACd,iBAAiB;EACjB,cAAc;EACd,mBAAmB;EACnB,mCAA2B;EAA3B,2BAA2B;EAC3B,WAAW;CAkBd;;AAjCL;EAkBY,uBAAuB;EACvB,YAAY;CACf;;AC8ZL;EDlbJ;IAuBY,aAAa;GAUpB;CEXJ;;AD4ZG;EDlbJ;IA2BY,WAAW;GAMlB;CELJ;;ADsZG;EDlbJ;IA+BY,WAAW;GAElB;CECJ;;AFlCD;EAoCQ,eAAe;EACf,mBAAmB;EACnB,sBAAsB;CACzB;;AAvCL;EA0CQ,gBAAgB;EAChB,mBAAmB;EACnB,iBAAiB;EACjB,sBAAsB;CACzB;;AAIL;EACI,qBAAqB;CACxB;;AAGD;EACI,cAAc;CACjB;;AAGD;EACI,gBAAgB;CASnB;;AC4WG;EDtXJ;IAIQ,gBAAgB;GAMvB;CELA;;ADiXG;EDtXJ;IAQQ,gBAAgB;GAEvB;CECA;;AFED;EACI,YAAY;EACZ,iBAAiB;EACjB,oBAAoB;EACpB,aAAa;EACb,kBAAkB;EAClB,iBAAiB;EACjB,mBAAmB;EACnB,mBAAmB;EACnB,mCAA2B;EAA3B,2BAA2B;CAK9B;;AAdD;EAYQ,iBAAiB;CACpB;;AAIL;EACI,cAAc;CACjB;;AAED;EAEQ,iBAAiB;CACpB","file":"docs.css","sourcesContent":["//\n@import \"variables\";\n@import \"mixins\";\n\n// Docs\n.elements-section {\n    padding: 120px 0;\n    overflow: hidden;\n}\n\n// Doc icon list\n.doc-icons-list {\n    padding-left: 0;\n    list-style: none;\n    overflow: hidden;\n\n    li {\n        background-color: #f9f9f9;\n        border: 1px solid #fff;\n        float: left;\n        font-size: 12px;\n        height: 125px;\n        line-height: 1.4;\n        padding: 10px;\n        text-align: center;\n        transition: all 0.25s ease;\n        width: 50%;\n\n        &:hover {\n            background-color: #333;\n            color: #fff;\n        }\n\n        @include media('>=lg') {\n            width: 12.5%;\n        }\n\n        @include media('>=md', '<lg') {\n            width: 20%;\n        }\n\n        @include media('>=sm', '<md') {\n            width: 25%;\n        }\n    }\n\n    .doc-list-class {\n        display: block;\n        text-align: center;\n        word-wrap: break-word;\n    }\n\n    .doc-list-icon {\n        font-size: 32px;\n        margin-bottom: 5px;\n        margin-top: 10px;\n        display: inline-block;\n    }\n}\n\n// ...\n.fix-footer {\n    margin-bottom: -50px;\n}\n\n//\n.doc-background {\n    height: 750px;\n}\n\n//\n.heading-large {\n    font-size: 52px;\n\n    @include media('<sm') {\n        font-size: 32px;\n    }\n\n    @include media('<sm') {\n        font-size: 18px;\n    }\n}\n\n// ...\n.box-row {\n    color: #fff;\n    background: #333;\n    margin-bottom: 15px;\n    height: 30px;\n    line-height: 30px;\n    overflow: hidden;\n    position: relative;\n    text-align: center;\n    transition: all 0.25s ease;\n\n    &:hover {\n        background: #666;\n    }\n}\n\n//\n.docs-map-1 {\n    height: 500px;\n}\n\n.docs-carousel-3 {\n    .owl-dots {\n        margin-top: 50px;\n    }\n}\n","@charset 'UTF-8';\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.3.1\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': (\n///      '(-webkit-min-device-pixel-ratio: 2)',\n///      '(min-resolution: 192dpi)'\n///    )\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': (\n    '(-webkit-min-device-pixel-ratio: 2)',\n    '(min-resolution: 192dpi)'\n  ), \n  'retina3x': (\n    '(-webkit-min-device-pixel-ratio: 3)',\n    '(min-resolution: 350dpi)'\n  )\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media(\">128px\") {}\n///\n///   /* Generates: */\n///   @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media(\">20em\") {}\n///\n///   /* Generates: */\n///   @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media(\">2.0rem\") {}\n///\n///   /* Generates: */\n///   @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1\n) !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported \n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n/// \n/// @param {String} $message - Message to log\n///\n@function log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n/// \n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if log('..') {}` or `$_: log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if log(..) {}` instead.\n  $_: log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value \n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if log(..) {}` instead.\n    $_: log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: log('Value for `to-number` should be a number or a string.');\n  }\n  \n  $result: 0;\n  $digits: 0;\n  $minus: str-slice($value, 1, 1) == '-';\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n  \n  @for $i from if($minus, 2, 1) through str-length($value) {\n    $character: str-slice($value, $i, $i);\n    \n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n    \n    @if $character == '.' {\n      $digits: 1; \n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);  \n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n  \n  @return if($minus, -$result, $result);;\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n  \n  @if not index(map-keys($units), $unit) {\n    $_: log('Invalid unit `#{$unit}`.');\n  }\n  \n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of \n/// the call. It is helpful when having a component needing an extended \n/// configuration such as custom breakpoints (referred to as tweakpoints) \n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $tweak-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media(\">phone\") { }\n///\n/// @example scss - With two set breakpoints\n///  @include media(\">phone\", \"<=tablet\") { } \n///\n/// @example scss - With custom values\n///  @include media(\">=358px\", \"<850px\") { } \n///\n/// @example scss - With set breakpoints with custom values\n///  @include media(\">desktop\", \"<=1350px\") { } \n///\n/// @example scss - With a static expression\n///  @include media(\"retina2x\") { } \n///\n/// @example scss - Mixing everything\n///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { } \n///\n@mixin media($conditions...) {\n  @if length($conditions) == 0 {\n    @content;\n  } @else {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n",".elements-section {\n  padding: 120px 0;\n  overflow: hidden;\n}\n\n.doc-icons-list {\n  padding-left: 0;\n  list-style: none;\n  overflow: hidden;\n}\n\n.doc-icons-list li {\n  background-color: #f9f9f9;\n  border: 1px solid #fff;\n  float: left;\n  font-size: 12px;\n  height: 125px;\n  line-height: 1.4;\n  padding: 10px;\n  text-align: center;\n  transition: all 0.25s ease;\n  width: 50%;\n}\n\n.doc-icons-list li:hover {\n  background-color: #333;\n  color: #fff;\n}\n\n@media (min-width: 1200px) {\n  .doc-icons-list li {\n    width: 12.5%;\n  }\n}\n\n@media (min-width: 992px) and (max-width: 1199px) {\n  .doc-icons-list li {\n    width: 20%;\n  }\n}\n\n@media (min-width: 768px) and (max-width: 991px) {\n  .doc-icons-list li {\n    width: 25%;\n  }\n}\n\n.doc-icons-list .doc-list-class {\n  display: block;\n  text-align: center;\n  word-wrap: break-word;\n}\n\n.doc-icons-list .doc-list-icon {\n  font-size: 32px;\n  margin-bottom: 5px;\n  margin-top: 10px;\n  display: inline-block;\n}\n\n.fix-footer {\n  margin-bottom: -50px;\n}\n\n.doc-background {\n  height: 750px;\n}\n\n.heading-large {\n  font-size: 52px;\n}\n\n@media (max-width: 767px) {\n  .heading-large {\n    font-size: 32px;\n  }\n}\n\n@media (max-width: 767px) {\n  .heading-large {\n    font-size: 18px;\n  }\n}\n\n.box-row {\n  color: #fff;\n  background: #333;\n  margin-bottom: 15px;\n  height: 30px;\n  line-height: 30px;\n  overflow: hidden;\n  position: relative;\n  text-align: center;\n  transition: all 0.25s ease;\n}\n\n.box-row:hover {\n  background: #666;\n}\n\n.docs-map-1 {\n  height: 500px;\n}\n\n.docs-carousel-3 .owl-dots {\n  margin-top: 50px;\n}\n"],"sourceRoot":"/source/"}